[{"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/App.tsx":"1","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/screens/Home.screen.tsx":"2","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/Header.tsx":"3","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/index.tsx":"4","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/index.tsx":"5","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/reducers/coinsReducer.ts":"6","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/actions/coinsActions.ts":"7","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/api/Api.ts":"8","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/index.ts":"9","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/reportWebVitals.ts":"10","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/BlocksTable.tsx":"11","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/store/store.ts":"12","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/LoadingSpinner.tsx":"13","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/screens/ViewDetails.screen.tsx":"14","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/TransactionsTable.tsx":"15","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/utils/DateFormater.ts":"16","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/reducers/index.ts":"17"},{"size":662,"mtime":1608567839290,"results":"18","hashOfConfig":"19"},{"size":955,"mtime":1608640268419,"results":"20","hashOfConfig":"19"},{"size":539,"mtime":1608564127489,"results":"21","hashOfConfig":"19"},{"size":25,"mtime":1608545361051,"results":"22","hashOfConfig":"19"},{"size":468,"mtime":1608560276935,"results":"23","hashOfConfig":"19"},{"size":1170,"mtime":1608611978657,"results":"24","hashOfConfig":"19"},{"size":2318,"mtime":1608641661477,"results":"25","hashOfConfig":"19"},{"size":168,"mtime":1608650897381,"results":"26","hashOfConfig":"19"},{"size":98,"mtime":1608560350878,"results":"27","hashOfConfig":"19"},{"size":425,"mtime":1608544093368,"results":"28","hashOfConfig":"19"},{"size":3647,"mtime":1608615059848,"results":"29","hashOfConfig":"19"},{"size":255,"mtime":1608560352299,"results":"30","hashOfConfig":"19"},{"size":760,"mtime":1608567801736,"results":"31","hashOfConfig":"19"},{"size":2693,"mtime":1608641613539,"results":"32","hashOfConfig":"19"},{"size":5599,"mtime":1608642483547,"results":"33","hashOfConfig":"19"},{"size":593,"mtime":1608607509061,"results":"34","hashOfConfig":"19"},{"size":217,"mtime":1608547577496,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"j3dql2",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/App.tsx",[],["77","78"],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/screens/Home.screen.tsx",["79","80"],"import React, { useEffect} from 'react';\n\n//redux\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ApplicationState, OnGetBlocks  } from '../redux'\nimport BlockTable from '../components/BlocksTable';\nimport LoadingSpinner from '../components/LoadingSpinner';\n\nconst _HomeScreen = () => {\n\n const dispatch = useDispatch()\n   \n  const { isLoading, blocks, appError }  = useSelector((state: ApplicationState) => state.coinsReducer);\n\n  useEffect(() => {\n      if(!Array.isArray(blocks)){\n          dispatch(OnGetBlocks())\n      }     \n    }, []);\n\n  const viewBlocks = () => {\n        if(isLoading){\n            return  <LoadingSpinner />\n        }else{\n          return Array.isArray(blocks) ? <BlockTable blocks={blocks}/> : <div>\"Data not available at this moment!\"</div>\n        }\n    }\n\n    return <div className=\"container main\">\n                {viewBlocks()}\n          </div>\n\n}\n\nconst HomeScreen = _HomeScreen;\n\nexport { HomeScreen };","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/Header.tsx",["81"],"\nimport { Link } from 'react-router-dom';\nimport logo from '../images/logo.svg';\n\nconst Header = () => {\n \n\n    return  <div className=\"nav-bar\">\n          <Link\n            to={'/'}\n            className=\"left brand-logo\"\n            style={{ marginLeft: '10px' }}\n          >\n            <img src={logo}  style={{ display: 'flex', justifyContent: 'center' , width: 200, height: 40, marginLeft: 50}}/>\n          </Link>\n          <ul style={{ flex: 8}}>\n            {/* Menu options */}\n          </ul>\n    </div>\n\n}\n\nexport { Header };\n ","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/index.tsx",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/index.tsx",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/reducers/coinsReducer.ts",[],["82","83"],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/actions/coinsActions.ts",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/api/Api.ts",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/index.ts",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/reportWebVitals.ts",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/BlocksTable.tsx",["84"],"import React, { useEffect ,useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Block } from '../models/'\nimport { FormatDate } from '../utils/DateFormater';\n\ninterface BlockProps{\n    blocks: [Block]\n}\n\n const BlockTable: React.FC<BlockProps> = ({ blocks}) => {\n     \n    const [items, setItems] = useState({});\n\n    const [ pageIndex, setPageIndex ] = useState(0);\n\n    const makePaination = () => {\n\n        let blocksPerPage = [];\n        var i,j,chunk = 10; // per page\n\n        for (i=0,j=blocks.length; i<j; i+=chunk) {\n            blocksPerPage.push(blocks.slice(i,i+chunk));\n        }\n\n        return blocksPerPage\n    }\n\n    useEffect(() => {\n        if(blocks!== undefined){\n            const blocksPerPage = makePaination();\n            setItems(blocksPerPage)\n        }\n    },[])\n   \n\n    const itemsForPage = () => {\n       return items as [[Block]];\n    }\n\n \n\n    const makePageNumbers = () => {\n\n        const currentItems = itemsForPage();\n        if(Array.isArray(currentItems)){\n            return currentItems.map((page, index) => {\n               return <li key={index} onClick={() => gotoPage(false, index)}  className={pageIndex === index ? \"active\" : \"waves-effect\"}><a href=\"#!\">{index+1}</a></li>\n            })\n        }\n    }\n\n    const gotoPage = (isNext: boolean, index?: number) => {\n\n        const currentItems = itemsForPage();\n        if(index !== undefined){\n             setPageIndex(index)\n        }else{\n             if(isNext){\n                setPageIndex((currentItems.length - 1) > pageIndex ? pageIndex+1 : pageIndex )\n            }else{\n                setPageIndex(pageIndex > 0 ? pageIndex-1 : pageIndex )\n            }\n        }\n    }\n\n    const renderPagination = () => {\n        return (\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                <ul className=\"pagination\">\n                    <li onClick={() => gotoPage(false)} className={pageIndex < 1 ? \"disabled\" : \"waves-effect\"}><a href=\"#!\"><i className=\"material-icons\">chevron_left</i></a></li>\n                        {makePageNumbers()}\n                     <li onClick={() => gotoPage(true)} className={pageIndex < (itemsForPage().length - 1)  ? \"waves-effect\" : \"disabled\" }><a href=\"#!\"><i className=\"material-icons\">chevron_right</i></a></li>\n                </ul>\n            </div>\n        )\n    }\n\n\n    const renderBlockRows = () => {\n\n        const currentItems = itemsForPage();\n\n        if(currentItems.length > pageIndex){\n            return currentItems[pageIndex].map((block) => {\n                return (\n                    <tr>\n                        <td><Link to={`/details/${block.hash}`} >{block.hash}</Link></td>\n                        <td>{FormatDate(block.time)}</td>\n                        <td>{block.height}</td>\n                   </tr>\n                );\n            })\n        }\n \n    }\n \n    return (\n \n        <div className=\"card card-width\">\n        <div className=\"col s12\">\n            <div className=\"card-content\">\n                <span className=\"card-title\">Latest Blocks</span>\n\n                <table className=\"highlight\">\n                    <thead>\n                    <tr>\n                        <th>Hash</th>\n                        <th>Age</th>\n                        <th>Height</th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                        {renderBlockRows()}\n                    </tbody>\n                </table>\n                \n            </div>\n            {renderPagination()}\n          </div>\n      </div>\n \n        \n    );\n\n}\n export default BlockTable;","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/store/store.ts",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/LoadingSpinner.tsx",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/screens/ViewDetails.screen.tsx",["85"],"import React, { useEffect} from 'react';\n\n//redux\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ApplicationState, OnGetBlockDetails  } from '../redux'\nimport LoadingSpinner from '../components/LoadingSpinner';\n\nimport { useParams } from 'react-router-dom'\nimport TransactionsTable from '../components/TransactionsTable';\n\ninterface DetailsProps{\n    hash: string\n}\n\nconst ViewDetailsScreen = () => {\n\n    let { hash } = useParams<DetailsProps>();\n\n    const dispatch = useDispatch()\n   \n    const { isLoading, blockDetails }  = useSelector((state: ApplicationState) => state.coinsReducer);\n\n    useEffect(() => {\n        dispatch(OnGetBlockDetails(hash, false));\n    }, []);\n\n    // Load More Transactions\n    const onTapViewMore = () => {\n        dispatch(OnGetBlockDetails(hash, true));\n    }\n \n    const renderDetals = () => {\n\n        if(isLoading){\n            return <LoadingSpinner />\n        }else{\n\n            if(blockDetails){\n                return (\n                    <div>\n                    <div className=\"card\">\n                        <div className=\"col s12\">\n                            <div className=\"card-content\">\n                                <span className=\"card-title\">Block Details</span>\n\n                                <table className=\"striped\">\n                                    <tbody>\n                                        <tr>\n                                            <td>Size</td>\n                                            <td>{blockDetails.size}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>Block Index</td>\n                                            <td>{blockDetails.block_index}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>Previous Hash</td>\n                                            <td>{blockDetails.prev_block}</td>\n                                        </tr>\n                                         \n                                    </tbody>\n                                </table>\n                                \n                            </div>\n                          </div>\n                     </div> \n                         <TransactionsTable transactions={blockDetails.tx} txnCount={blockDetails.txnCount} onTapViewMore={onTapViewMore} /> \n                     </div>\n                )\n\n            }\n        }\n        return <div> Data Not found</div>\n    }\n\n    return <div className=\"container main\">\n                {renderDetals()}       \n        </div>\n\n}\n\nexport { ViewDetailsScreen };","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/components/TransactionsTable.tsx",["86"],"import React, { useState, useEffect } from 'react';\nimport {Transaction } from '../models/'\nimport { FormatDate } from '../utils/DateFormater';\n \ninterface TransactionsProps{\n    transactions: [Transaction],\n    txnCount: number,\n    onTapViewMore: Function\n}\n\n const TransactionsTable: React.FC<TransactionsProps> = ({ transactions, txnCount, onTapViewMore }) => {\n\n    const [items, setItems] = useState({});\n\n    const [ pageIndex, setPageIndex ] = useState(0);\n\n    const makePaination = () => {\n\n        let transactionsPerPage = [];\n        var i,j,chunk = 10; // per page\n\n        for (i=0,j=transactions.length; i<j; i+=chunk) {\n            transactionsPerPage.push(transactions.slice(i,i+chunk));\n        }\n        return transactionsPerPage\n    }\n\n\n    useEffect(() => {\n        if(transactions!== undefined){\n            const transactionsPerPage = makePaination();\n            setItems(transactionsPerPage)\n        }\n    },[])\n\n    const itemsForPage = () => {\n        return items as [[Transaction]];\n     }\n\n    const makePageNumbers = () => {\n\n        const currentItems = itemsForPage();\n\n        if(Array.isArray(currentItems)){\n\n            const totalPages = currentItems.length;\n\n            return currentItems.map((page, index) => {\n                if(totalPages > 9 && index > 9){\n                    if(index === (totalPages - 1)){\n                        return <li  key={index} onClick={() => gotoPage(false, index)}  className={pageIndex === index ? \"active\" : \"none\"}><a href=\"#!\">... {index+1}</a></li>\n                    }\n                    return <li style={{ display: pageIndex === index ? 'inline' : 'none',  paddingTop: 5, paddingBottom: 5}} key={index} onClick={() => gotoPage(false, index)}  className={pageIndex === index ? \"active\" : \"none\"}><a href=\"#!\">{index+1}</a></li>\n                }else{\n                    return <li key={index} onClick={() => gotoPage(false, index)}  className={pageIndex === index ? \"active\" : \"none\"}><a href=\"#!\">{index+1}</a></li>\n                }\n            })\n        }\n     }\n\n    const gotoPage = (isNext: boolean, index?: number) => {\n\n        const currentItems = itemsForPage();\n        if(index !== undefined){\n             setPageIndex(index)\n        }else{\n             if(isNext){\n                setPageIndex((currentItems.length - 1) > pageIndex ? pageIndex+1 : pageIndex )\n            }else{\n                setPageIndex(pageIndex > 0 ? pageIndex-1 : pageIndex )\n            }\n        }\n    }\n\n    const renderPagination = () => {\n        return (\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                <ul className=\"pagination\">\n                    <li onClick={() => gotoPage(false)} className={pageIndex < 1 ? \"disabled\" : \"waves-effect\"}><a href=\"#!\"><i className=\"material-icons\">chevron_left</i></a></li>\n                        {makePageNumbers()}\n                     <li onClick={() => gotoPage(true)} className={pageIndex < (itemsForPage().length - 1)  ? \"waves-effect\" : \"disabled\" }><a href=\"#!\"><i className=\"material-icons\">chevron_right</i></a></li>\n                </ul>\n            </div>\n        )\n    } \n\n    const renderViewMoreTransaction = () => {\n        return(\n            <div style={{ display: 'flex', justifyContent: 'center', height: 60}}>\n                  <button onClick={() => onTapViewMore()} className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">View More\n                    </button>\n            </div>\n        )\n    }\n\n    const renderRows = () => {\n        const currentItems = itemsForPage();\n\n        if(currentItems){\n            if(currentItems.length > pageIndex){\n                return currentItems[pageIndex].map((item) => {\n                    return (\n                        <tr>\n                            <td>{item.hash}</td>\n                            <td>{item.block_index}</td>\n                            <td>{item.block_height}</td>\n                            <td>{item.weight}</td>\n                            <td>{item.fee}</td>\n                            <td>{FormatDate(item.time)}</td>\n                    </tr>\n                    );\n                })\n            }\n        }\n    }\n\n    const transactionsDetails = () => {\n\n        return (\n            <div className=\"col s12\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">Transactions</span>\n                    <table className=\"highlight\">\n                    <thead>\n                    <tr>\n                        <th>Hash</th>\n                        <th>Index</th>\n                        <th>Height</th>\n                        <th>Weight</th>\n                        <th>Fee</th>\n                        <th>Age</th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                        {renderRows()}\n                    </tbody>\n                    </table>\n                </div>\n                { txnCount > 10 ?  renderViewMoreTransaction() : renderPagination()}\n            </div>\n        );\n\n    }\n\n    const transactionsNotfound = () => {\n\n        return (\n            <div className=\"col s12\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">No Transactions Available</span>\n                    \n                </div>\n            </div>\n        );\n\n    }\n\n    return (\n          <div className=\"card\">\n            {transactions !== undefined ? transactionsDetails() : transactionsNotfound() }\n        </div> \n\n        \n    );\n\n}\n export default TransactionsTable;","/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/utils/DateFormater.ts",[],"/Volumes/Projects/NodeJS/jg_coding_challenge/bitwala_client/src/redux/reducers/index.ts",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":13,"column":30,"nodeType":"93","messageId":"94","endLine":13,"endColumn":38},{"ruleId":"95","severity":1,"message":"96","line":19,"column":8,"nodeType":"97","endLine":19,"endColumn":10,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":14,"column":13,"nodeType":"101","endLine":14,"endColumn":125},{"ruleId":"87","replacedBy":"102"},{"ruleId":"89","replacedBy":"103"},{"ruleId":"95","severity":1,"message":"104","line":33,"column":7,"nodeType":"97","endLine":33,"endColumn":9,"suggestions":"105"},{"ruleId":"95","severity":1,"message":"106","line":25,"column":8,"nodeType":"97","endLine":25,"endColumn":10,"suggestions":"107"},{"ruleId":"95","severity":1,"message":"108","line":34,"column":7,"nodeType":"97","endLine":34,"endColumn":9,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"@typescript-eslint/no-unused-vars","'appError' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'blocks' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["112"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["110"],["111"],"React Hook useEffect has missing dependencies: 'blocks' and 'makePaination'. Either include them or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'dispatch' and 'hash'. Either include them or remove the dependency array.",["114"],"React Hook useEffect has missing dependencies: 'makePaination' and 'transactions'. Either include them or remove the dependency array.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [blocks, dispatch]",{"range":"124","text":"125"},"Update the dependencies array to be: [blocks, makePaination]",{"range":"126","text":"127"},"Update the dependencies array to be: [dispatch, hash]",{"range":"128","text":"129"},"Update the dependencies array to be: [makePaination, transactions]",{"range":"130","text":"131"},[554,556],"[blocks, dispatch]",[811,813],"[blocks, makePaination]",[688,690],"[dispatch, hash]",[935,937],"[makePaination, transactions]"]